name:  Android build on Ubuntu

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout branch
      uses: actions/checkout@v2

    - name: Check versions
      run: |
        echo "Node version:"
        node --version
        echo "NPM version:"
        npm --version
        echo "Java version:"
        java -version
        echo "PATH:"
        echo $PATH
        echo "ANDROID_HOME:"
        echo $ANDROID_HOME

    - name: Caching node modules
      uses: actions/cache@v1
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-treemapper-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-treemapper-

    - name: Install npm
      run: npm install

    - name: Setting Environment Variables
      env:
        MAPBOXGL_ACCCESS_TOKEN: ${{ secrets.MAPBOXGL_ACCCESS_TOKEN }}
        BUGSNAP_CLIENT_KEY: ${{ secrets.BUGSNAP_CLIENT_KEY }}
        AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
        AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
        API_ENDPOINT: ${{ secrets.API_ENDPOINT }}
        CDN_URL: ${{ secrets.CDN_URL }}
      run: |
        echo "MAPBOXGL_ACCCESS_TOKEN=$MAPBOXGL_ACCCESS_TOKEN" >> .env
        echo "BUGSNAP_CLIENT_KEY=$BUGSNAP_CLIENT_KEY" >> .env
        echo "AUTH0_DOMAIN=$AUTH0_DOMAIN" >> .env
        echo "AUTH0_CLIENT_ID=$AUTH0_CLIENT_ID" >> .env
        echo "API_ENDPOINT=$API_ENDPOINT" >> .env
        echo "CDN_URL=$CDN_URL" >> .env

    - name: Preparing Android build
      env:
        android_release_password: ${{ secrets.ANDROID_RELEASE_PASSWORD }}
      run: |
        # prepare local.properties
        echo "MYAPP_RELEASE_STORE_PASSWORD=$android_release_password" > android/local.properties
        echo "MYAPP_RELEASE_KEY_PASSWORD=$android_release_password" >> android/local.properties

    - name: Fixes for Android Build
      run: |
        # fix problems with 'Error: ENOSPC: System limit for number of file watchers reached'
        echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
        # fix for task ':app:stripDevelopReleaseDebugSymbols'
        (echo y; echo y; echo y;) | sudo $ANDROID_HOME/tools/bin/sdkmanager  'ndk;20.0.5594570'

    - name: Caching Gradle dependencies
      uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-treemapper-${{ hashFiles('android/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-treemapper-

    - name: Android Build
      run: ./gradlew assembleRelease --stacktrace --no-daemon
      working-directory: ./android

# We only have 0.5GB space to store artifacts for GitHub actions
#    - name: Upload Artifact
#      uses: actions/upload-artifact@v1
#      with:
#        name: app-release.apk
#        path: android/app/build/outputs/apk/release/

    - name: Prepare Android APK for upload
      run: |
        upload_file=TreeMapper-`echo $GITHUB_REF | awk '{split($0,a,"/"); print a[3]}'`.apk
        echo "upload_file=$upload_file" >> $GITHUB_ENV
        mkdir -p uploads
        mv android/app/build/outputs/apk/release/app-release.apk uploads/$upload_file

    # depends on existence of upload file at uploads/$upload_file
    - name: Upload Android APK to Browserstack
      env:
        BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
      run: |
        curl -u "planetit1:$BROWSERSTACK_ACCESS_KEY" -X POST "https://api-cloud.browserstack.com/app-live/upload" -F "file=@uploads/$upload_file"
        curl -u "planetit1:$BROWSERSTACK_ACCESS_KEY" -X POST "https://api-cloud.browserstack.com/app-automate/upload" -F "file=@uploads/$upload_file"

    # depends on existence of upload file in folder uploads
    - name: Upload Android APK to Google Drive
      uses: satackey/action-google-drive@v1.2.0
      with:
        upload-from: ./uploads
        upload-to: /GitHubActions/TreeMapperApp/.
        skicka-tokencache-json: ${{ secrets.SKICKA_TOKENCACHE_JSON }}
        google-client-id: ${{ secrets.GOOGLE_DRIVE_CLIENT_ID }}
        google-client-secret: ${{ secrets.GOOGLE_DRIVE_CLIENT_SECRET }}

    - name: Slack notification
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        payload="{\"channel\": \"#notifications-git\", \"username\": \"webhookbot\", \"text\": \"Finished GitHub action $GITHUB_WORKFLOW for $GITHUB_REF (TreeMapper)\"}"
        curl -X POST --data-urlencode "payload=$payload" https://hooks.slack.com/services/$SLACK_WEBHOOK_URL
